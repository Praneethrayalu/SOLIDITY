Question:
Write a Solidity function for a staking contract where users can deposit tokens to earn rewards over time.
The rewards should be calculated based on the length of time the tokens are staked. 
Write the function to handle deposits, withdrawals, and rewards calculation. Implement checks to ensure that users can only withdraw the tokens they have deposited.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StakingContract {
    struct Stake {
        uint256 amount;
        uint256 startTime;
    }

    mapping(address => Stake) public stakes;
    uint256 public rewardRate; // Rewards per second per token
    address public owner;

    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 reward);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this");
        _;
    }

    constructor(uint256 _rewardRate) {
        rewardRate = _rewardRate;
        owner = msg.sender;
    }

    function stakeTokens() external payable {
        require(msg.value > 0, "Must stake more than 0 tokens");

        // Calculate and update rewards for the existing stake
        if (stakes[msg.sender].amount > 0) {
            uint256 reward = calculateReward(msg.sender);
            stakes[msg.sender].amount += reward;
        }

        // Update the user's stake
        stakes[msg.sender].amount += msg.value;
        stakes[msg.sender].startTime = block.timestamp;

        emit Staked(msg.sender, msg.value);
    }

    function withdrawTokens() external {
        require(stakes[msg.sender].amount > 0, "No tokens to withdraw");

        uint256 reward = calculateReward(msg.sender);
        uint256 totalAmount = stakes[msg.sender].amount + reward;

        // Reset the user's stake
        stakes[msg.sender].amount = 0;
        stakes[msg.sender].startTime = 0;

        payable(msg.sender).transfer(totalAmount);

        emit Withdrawn(msg.sender, totalAmount);
    }

    function calculateReward(address user) public view returns (uint256) {
        Stake memory stake = stakes[user];
        if (stake.amount == 0 || stake.startTime == 0) {
            return 0;
        }

        uint256 stakingDuration = block.timestamp - stake.startTime;
        uint256 reward = stakingDuration * stake.amount * rewardRate / 1e18;

        return reward;
    }

    function getStakeDetails(address user) external view returns (uint256 amount, uint256 startTime) {
        Stake memory stake = stakes[user];
        return (stake.amount, stake.startTime);
    }

    function updateRewardRate(uint256 _newRate) external onlyOwner {
        rewardRate = _newRate;
    }
}
